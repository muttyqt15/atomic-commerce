// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (store_id, name, email, password_hash, role)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, store_id, name, email, password_hash, role, created_at, updated_at
`

type CreateUserParams struct {
	StoreID      pgtype.UUID
	Name         string
	Email        string
	PasswordHash string
	Role         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.StoreID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailAndStore = `-- name: GetUserByEmailAndStore :one
SELECT id, store_id, name, email, password_hash, role, created_at, updated_at FROM users
WHERE store_id = $1 AND email = $2
`

type GetUserByEmailAndStoreParams struct {
	StoreID pgtype.UUID
	Email   string
}

func (q *Queries) GetUserByEmailAndStore(ctx context.Context, arg GetUserByEmailAndStoreParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndStore, arg.StoreID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
